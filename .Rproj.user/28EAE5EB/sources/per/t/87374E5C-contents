## Experiments for JM SC dataset

#----------------
#Jeff Mohl
#5/1/2017
#----------------

setwd("C:/Users/jtm47/Documents/Projects/RCode/JMSC")

file_dir = "C:/Users/jtm47/Documents/Projects/AVD_SC_neural/results"
fnames.JM <- scan(paste("C:/Users/jtm47/Documents/Projects/AVD_SC_neural/results/mplx_data/AVV/JMSC_list.txt", sep=""),"a")

## Poisson Model ----------------
source("ICdualsound_analysis-new_JMSC.R")

poi.JMSC <- function(fname, on.reward = FALSE, match.level = FALSE, AB.eqlevel = FALSE, outfile = "", start = 0, end = 600){
  infile1 <- paste(file_dir,"/mplx_data/AVV/", fname, ".txt", sep = "")
  trials <- read.table(infile1, col.names = c("TRIAL", "TASKID", "A_FREQ", "B_FREQ", "XA", "XB", "REWARD","A_LEVEL", "B_LEVEL","SOFF"))
  
  infile2 <- paste(file_dir,"/mplx_data/AVV/", fname, "_spiketimes.txt", sep = "")
  spiketimes <- read.table(infile2, col.names = c("TRIAL2", "TIMES"))
  
  #need to edit this part still, not consistent between builds
  vis_locs<- c(-24,-18,-12,-6,6,12,18,24) # also not every pair exists in data, but should be fine for now (just produce warnings)
  aud_locs<- c(-24,-6,6,24)
  frq1 = 5 #vis
  frq2 = 1 #aud
  
  par(mfcol = c(2,2), mar = c(1,1,2,0) + .1)
  for(vloc in vis_locs){
    for(aloc in aud_locs){
      try({lbf <- round(esti.Poi(trials, spiketimes, c(frq1,frq2), c(vloc,aloc), on.reward, start, end, match.level, AB.eqlevel, FALSE), 4);
      cat(fname, c(frq1,frq2,vloc,aloc, lbf), "\n", file = outfile, append = TRUE)})
    }
  }
}

#pdf(height = 8, width = 5, file = paste(file_dir,"/mplx_results/JMSC.pdf",sep=""))
for(fname in fnames.JM){
  try(poi.JMSC(fname, FALSE, FALSE, TRUE, outfile = paste(file_dir,"/mplx_results/bfs-JMSC-AVV.txt",sep=""), 0, 600))
}
#dev.off()


## BFS processor ---------------------------

bfs <- read.table(paste(file_dir,"/mplx_results/bfs-JMSC-AVV.txt",sep=""))
names(bfs) <- c("CellId","sA", "sB","xA","xB", "sep", "mix", "ave", "out", "dom", "pval1", "pval2", "pvalD", "frA","frB","frAB","varA","varB","varAB")

attach(bfs)

all.bf <- data.frame(Mixture = mix, Average = ave, Outside = out, Single = dom)
p.post <- exp(all.bf) / rowSums(exp(all.bf))
summary(p.post)

WinModel <- dimnames(p.post)[[2]][apply(p.post, 1, which.max)]
post.probs <- as.data.frame(p.post)
names(post.probs) <- c("PrMix", "PrAve", "PrOut", "PrSing")
post.probs$WinModels <- WinModel
post.probs$WinPr <- apply(post.probs[,1:4], 1, max)

dd <- bfs[,c(1:6,11:19)]
names(dd) <- c("CellId", "sA", "sB","xA","xB", "SepBF", "Pval1", "Pval2", "PvalD","spksA","spksB","spksAB","varA","varB","varAB")
#var and FR are in terms of total count I believe

full.dd <- cbind(dd, post.probs)
write.csv(full.dd, file = paste(file_dir, "/mplx_results/poi-JMSC-AVV.csv", sep=""), row.names = FALSE)
detach(bfs)

#filtering
results = read.csv(paste(file_dir,"/mplx_results/poi-JMSC.csv",sep=""))
poi.good <- (results$Pval1 > 0.1 & results$Pval2 > 0.1)
sep.good <- (results$SepBF > 3)

goods <- poi.good & sep.good
summary(goods)

results.selected = results[goods,]
write.csv(results.selected, file = paste(file_dir,"/mplx_results/JMSC-selected-AVV.csv",sep=""), row.names = FALSE)


## DAPP Model --------------------------------------

source("dynamic_neural_model_JMSC.R")
triplet.meta <- read.csv(paste(file_dir,"/mplx_results/JMSC-selected.csv",sep=""))
local.path <- file_dir

require(parallel)
trip.set <- 1:nrow(triplet.meta)

BW <- 50
data.path <- paste0(local.path,"/mplx_data/")
save.path <- paste0(local.path, "/mplx_results/ResultsBW", BW)

if(!dir.exists(save.path)) dir.create(save.path)
if(!dir.exists(paste0(save.path, "/Figures"))) dir.create(paste0(save.path, "/Figures"))
if(!dir.exists(paste0(save.path, "/Summaries"))) dir.create(paste0(save.path, "/Summaries"))

all.set <- mclapply(trip.set, function(jj) try(fitter.fn(jj, triplet.meta, start.time=0, end.time = 400, plot = FALSE, verbose = FALSE, bw = BW, on.reward = FALSE, save.figure = TRUE, save.out = TRUE, data.path = data.path, local.pull = TRUE, save.path = save.path)), mc.cores = 1)
trip.err <- (sapply(all.set, class) == "try-error")

## Generating summary plots
file.tag <- rep(NA, length(trip.set))
for(jj in 1:length(trip.set)){
  triplet <- trip.set[jj]
  xA <- triplet.meta[triplet, "xA"]
  xB <- triplet.meta[triplet, "xB"]
  fname <- triplet.meta[triplet, "CellId"]
  file.tag[jj] <- paste0(fname, "_S", xB, "_V",xA)
}

triplet.combo <- cbind(triplet.meta, tag = file.tag)

summary.files <- list.files(paste0(save.path, "/Summaries"))
nfiles <- length(summary.files)
ncuts <- 4
summary.meta <- as.data.frame(matrix(nrow = nfiles, ncol = 1+4*ncuts))
names(summary.meta) <- c("tag", paste0("mmPriorQ", 1:ncuts), paste0("mmPostQ", 1:ncuts), paste0("avPriorQ", 1:ncuts), paste0("avPostQ", 1:ncuts))
for(jj in 1:nfiles){
  ff <- summary.files[jj]
  load(paste0(save.path, "/Summaries/", ff))
  ff.tag <- substring(ff, 1, nchar(ff)-3)
  sm <- summary(fit.post, tilt = TRUE, cut = 1/ncuts, mesh = 1/ncuts, nprior = 1e4)
  summary.meta[jj,1] <- ff.tag
  summary.meta[jj,-1] <- c(sm)
  rm(fit.post)
}


triplet.combo$tag <- toupper(triplet.combo$tag)
summary.meta$tag <- toupper(summary.meta$tag)
triplet.final <- merge(triplet.combo, summary.meta, by = "tag", all = TRUE)
triplet.final$wavieness <- with(triplet.final, (mmPostQ3 + mmPostQ4)/(mmPostQ1 + mmPostQ2))
triplet.final$centrality <- with(triplet.final, (avPostQ2 + avPostQ3)/(avPostQ1 + avPostQ4))
triplet.final$skewness <- with(triplet.final, pmax((avPostQ3 + avPostQ4)/(1e-3 + avPostQ1 + avPostQ2), (avPostQ1 + avPostQ2)/(1e-3 + avPostQ3 + avPostQ4)))
triplet.final$scaledskew <- log(pmax(1, pmin(triplet.final$skewness, 100))) / log(1e2)
triplet.final$chosen.tag <- ""
#select.triplets <- sapply(select.tags, match, table = triplet.final$tag)
#triplet.final$chosen.tag[select.triplets] <- as.character(triplet.final$tag[select.triplets])
ggplot(triplet.final, aes(centrality, wavieness)) + geom_point(aes(color = rank(skewness), shape = WinModels), cex = 4, alpha = 0.7) + scale_colour_gradientn(colours=rainbow(2)) + geom_hline(yintercept = 1, lty = 2, col = "gray") + geom_vline(xintercept = 7/3, lty = 2, col = "gray") + geom_text(aes(label = chosen.tag), size = 2, vjust = -.01, hjust = -.01)


three.tags <- list(wavieness = c("flat", "", "wavy"),
                   centrality = c("extreme", "", "central"),
                   skewness = c("symmetric", "", "skewed"))
pr.cuts <- list(wavieness = c(0, .78, 1.3, Inf), centrality = c(0,1.68,3.24,Inf), skewness = c(0,2,4,Inf))
#Prior wavieness = 1, centrality = 2.33 and skewness = 1.
# The cut-offs used above are resonable extremeties -- but could be altered.

three.summaries <- data.frame(matrix(NA, nrow = nrow(triplet.final), ncol = 3))
names(three.summaries) <- names(three.tags)

for(sm.name in c("centrality", "wavieness", "skewness")){
  groups <- cut(triplet.final[,sm.name], pr.cuts[[sm.name]], labels = FALSE, include.lowest = TRUE)
  three.summaries[,sm.name] <- three.tags[[sm.name]][groups]
}
triplet.final$dynamic.analysis.tag <- apply(three.summaries, 1, paste, collapse = "-")
triplet.selected = triplet.final[,c(1:22,39:42,44)]
write.csv(triplet.selected, file = paste(file_dir, "/JMSC_final.csv", sep=""), row.names = FALSE)


whole3summ <- with(triplet.final, table(WinModels, dynamic.analysis.tag))
whole3summ <- whole3summ / rowSums(whole3summ)
whole3summ <- whole3summ[,apply(whole3summ, 2, max) >= 0.1]
whole3summ <- cbind(whole3summ, other = 1 - rowSums(whole3summ))
class(whole3summ) <- "table"
whole3summ.df <- as.data.frame(whole3summ)
names(whole3summ.df)[1:2] <- c("WinModels", "dynamic.analysis.tag")
ggplot(subset(whole3summ.df, Freq > 0.1), aes(WinModels, dynamic.analysis.tag)) + geom_tile(aes(fill = Freq)) + scale_fill_gradientn(colors = rainbow(4)) +  labs(title = "All passing triplets, BW = 50")

top.cut <- 0.95
whole3summ.top <- with(subset(triplet.final, WinPr > top.cut), table(WinModels, dynamic.analysis.tag))
whole3summ.top <- whole3summ.top / rowSums(whole3summ.top)
whole3summ.top <- whole3summ.top[,apply(whole3summ.top, 2, max, na.rm = TRUE) >= 0.1]
whole3summ.top <- cbind(whole3summ.top, other = 1 - rowSums(whole3summ.top))
class(whole3summ.top) <- "table"
whole3summ.top.df <- as.data.frame(whole3summ.top)
names(whole3summ.top.df)[1:2] <- c("WinModels", "dynamic.analysis.tag")
ggplot(subset(whole3summ.top.df, Freq > 0.1), aes(WinModels, dynamic.analysis.tag)) + geom_tile(aes(fill = Freq)) + scale_fill_gradientn(colors = rainbow(4)) +  labs(title = paste0("WinPr > ", top.cut, ", BW = 50"))

## whole trial summary
qplot(factor(WinModels), data = triplet.final, fill = factor(WinPr < 0.95))
qplot(factor(WinModels), data = triplet.final, fill = factor(SepBF < 7))


## dynamic analysis
ggplot(triplet.final, aes(dynamic.analysis.tag, fill=(WinPr < 0.95))) + geom_bar() + coord_flip()
ggplot(triplet.final, aes(dynamic.analysis.tag, fill=(SepBF > 7.0))) + geom_bar() + coord_flip()


sep.cut <- 14.0
whole3summ.top <- with(subset(triplet.final, SepBF > sep.cut), table(WinModels, dynamic.analysis.tag))
whole3summ.top <- whole3summ.top / rowSums(whole3summ.top)
whole3summ.top <- whole3summ.top[,apply(whole3summ.top, 2, max, na.rm = TRUE) >= 0.1]
whole3summ.top <- cbind(whole3summ.top, other = 1 - rowSums(whole3summ.top))
class(whole3summ.top) <- "table"
whole3summ.top.df <- as.data.frame(whole3summ.top)
names(whole3summ.top.df)[1:2] <- c("WinModels", "dynamic.analysis.tag")
ggplot(subset(whole3summ.top.df, Freq > 0.1), aes(WinModels, dynamic.analysis.tag)) + geom_tile(aes(fill = Freq)) + scale_fill_gradientn(colors = rainbow(4)) +  labs(title = paste0("WinPr > ", top.cut, ", BW = 50"))
